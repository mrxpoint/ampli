/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Swap as PrismaSwap, User as PrismaUser } from "@prisma/client";

export class SwapServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SwapCountArgs, "select">): Promise<number> {
    return this.prisma.swap.count(args);
  }

  async swaps(args: Prisma.SwapFindManyArgs): Promise<PrismaSwap[]> {
    return this.prisma.swap.findMany(args);
  }
  async swap(args: Prisma.SwapFindUniqueArgs): Promise<PrismaSwap | null> {
    return this.prisma.swap.findUnique(args);
  }
  async createSwap(args: Prisma.SwapCreateArgs): Promise<PrismaSwap> {
    return this.prisma.swap.create(args);
  }
  async updateSwap(args: Prisma.SwapUpdateArgs): Promise<PrismaSwap> {
    return this.prisma.swap.update(args);
  }
  async deleteSwap(args: Prisma.SwapDeleteArgs): Promise<PrismaSwap> {
    return this.prisma.swap.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.swap
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
