/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Swap } from "./Swap";
import { SwapCountArgs } from "./SwapCountArgs";
import { SwapFindManyArgs } from "./SwapFindManyArgs";
import { SwapFindUniqueArgs } from "./SwapFindUniqueArgs";
import { CreateSwapArgs } from "./CreateSwapArgs";
import { UpdateSwapArgs } from "./UpdateSwapArgs";
import { DeleteSwapArgs } from "./DeleteSwapArgs";
import { User } from "../../user/base/User";
import { SwapService } from "../swap.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Swap)
export class SwapResolverBase {
  constructor(
    protected readonly service: SwapService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Swap",
    action: "read",
    possession: "any",
  })
  async _swapsMeta(
    @graphql.Args() args: SwapCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Swap])
  @nestAccessControl.UseRoles({
    resource: "Swap",
    action: "read",
    possession: "any",
  })
  async swaps(@graphql.Args() args: SwapFindManyArgs): Promise<Swap[]> {
    return this.service.swaps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Swap, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Swap",
    action: "read",
    possession: "own",
  })
  async swap(@graphql.Args() args: SwapFindUniqueArgs): Promise<Swap | null> {
    const result = await this.service.swap(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Swap)
  @nestAccessControl.UseRoles({
    resource: "Swap",
    action: "create",
    possession: "any",
  })
  async createSwap(@graphql.Args() args: CreateSwapArgs): Promise<Swap> {
    return await this.service.createSwap({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Swap)
  @nestAccessControl.UseRoles({
    resource: "Swap",
    action: "update",
    possession: "any",
  })
  async updateSwap(@graphql.Args() args: UpdateSwapArgs): Promise<Swap | null> {
    try {
      return await this.service.updateSwap({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Swap)
  @nestAccessControl.UseRoles({
    resource: "Swap",
    action: "delete",
    possession: "any",
  })
  async deleteSwap(@graphql.Args() args: DeleteSwapArgs): Promise<Swap | null> {
    try {
      return await this.service.deleteSwap(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Swap): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
